const jwt = require('jsonwebtoken');

const { getAll, getAllMatching, deleteUserByName } = require('./../services/usersServices')

const SECRET_KEY = 'your_secret_key_here'; 


async function getAllUsers(req, res){
    const authHeader = req.headers['authorization'];
    const token = authHeader && authHeader.split(' ')[1];
    if (!token) {
        res.writeHead(401, {'Content-Type' : 'application/json'});
        res.end(JSON.stringify({message : "No token provided"}));
        return;
    }

    try {
        jwt.verify(token, SECRET_KEY);
    } catch (err) { 
        res.writeHead(401, {'Content-type' : 'application/json' });
        res.end(JSON.stringify({ message : "Invalid token" }));
        return;
    }

    try {
        const users = await getAll();

        if(users){
            res.writeHead(200, { 'Content-type' : 'application/json' });
            res.end(JSON.stringify(users));
        } else {
            res.writeHead(404, {'Content-type' : 'application-json' });
            res.end(JSON.stringify({message : "Old posts not found"}));
        }

    } catch (err) {
        console.error("Eroor in getting the old variants")
        res.writeHead(500, {'Content-Type' : 'application/json' });
        res.end(JSON.stringify({message : "Internal server error"}));
    }


}

async function getAllUsersMatching(req, res){
    const url = new URL(req.url, `http://${req.headers.host}`);
    const username = url.searchParams.get('username');


    const authHeader = req.headers['authorization'];
    const token = authHeader && authHeader.split(' ')[1];
    if (!token) {
        res.writeHead(401, {'Content-Type' : 'application/json'});
        res.end(JSON.stringify({message : "No token provided"}));
        return;
    }

    try {
        jwt.verify(token, SECRET_KEY);
    } catch (err) { 
        res.writeHead(401, {'Content-type' : 'application/json' });
        res.end(JSON.stringify({ message : "Invalid token" }));
        return;
    }

    try {
        console.log("aici????");
        const users = await getAllMatching(username);
        console.log("controler:: " + users);

        if(users){
            res.writeHead(200, { 'Content-type' : 'application/json' });
            res.end(JSON.stringify(users));
        } else {
            res.writeHead(404, {'Content-type' : 'application-json' });
            res.end(JSON.stringify({message : "Old posts not found"}));
        }

    } catch (err) {
        console.error("Eroor in getting the old variants")
        res.writeHead(500, {'Content-Type' : 'application/json' });
        res.end(JSON.stringify({message : "Internal server error"}));
    }
}

async function deleteUser(req, res) {
    const authHeader = req.headers['authorization'];
    const token = authHeader && authHeader.split(' ')[1];
    
    if (!token) {
        res.writeHead(401, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify({ message: "No token provided" }));
        return;
    }

    try {
        jwt.verify(token, SECRET_KEY);
    } catch (err) {
        res.writeHead(401, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify({ message: "Invalid token" }));
        return;
    }

    let body = '';
    req.on('data', chunk => {
        body += chunk.toString();
    });

    req.on('end', async () => {
        try {
            const parsedBody = JSON.parse(body);
            const username = parsedBody.username;
            
            if (!username) {
                res.writeHead(400, { 'Content-Type': 'application/json' });
                res.end(JSON.stringify({ message: "Username not provided" }));
                return;
            }

            const users = await deleteUserByName(username);

            if (users) {
                res.writeHead(200, { 'Content-Type': 'application/json' });
                res.end(JSON.stringify(users));
            } else {
                res.writeHead(404, { 'Content-Type': 'application/json' });
                res.end(JSON.stringify({ message: "User not found" }));
            }

        } catch (err) {
            console.error("Error in deleting the user: ", err);
            res.writeHead(500, { 'Content-Type': 'application/json' });
            res.end(JSON.stringify({ message: "Internal server error" }));
        }
    });
}
module.exports = {
    getAllUsers,
    getAllUsersMatching,
    deleteUser
}